/*por elemento */
body{
    background-color:aquamarine;
}
/* Para hacer comentarios, tbm puede hacerse con la tecla CTRL + llave de cierre (tbm sirve para el html) */
h1{
    color:blue;
    font-size: 80px;
}

/* selector por clase */
.selector_clase{
    color:red;
    font-size: 30px;
}

/* selector por id */
#selector_id{
    color:yellowgreen;
    font-size: 24px;
}

button{
    background-color: red;
    border-radius: 20px;
    padding: 10px; /*Paddin sirve para dar espacio interno desde los bordes hacia el centro*/
    /*Margin es para espacio externo desde el borde hacia afuera*/
    width: 150px;
    height: 50;
    border: none;
    transition: all 1.5s ease;
}

/*pseudo clase: define el estilo de estado de un elemento. Ejm: pasar el mouse sobre el button*/
button:hover{
    background-color: green;
}
.pseudo_clase_hover{
    font-size: 25px;
}
.pseudo_clase_hover:hover{
    color:blue;
    cursor: pointer;
}
.pseudo_clase_link_hover{
    text-decoration: none;
    font-size: 25px;
}
.pseudo_clase_link_hover:hover{
    text-decoration: underline;
}
.pseudo_clase_link_hover:active{
    font-size:40px;
    color:orange;
}
.pseudo_clase_link_hover:focus{
    color:violet;
    border: 2px dotted #444;
}
input:active{
    background-color:yellow;
}
input:focus{
    background-color: blue;
}
/*pseudoclase aplicada al primer y último hijo*/
.hijos_pseudo p:first-child{
    background-color: red;
}
.hijos_pseudo p:last-child{
    background-color: blue;
}
.hijos_pseudo p:nth-child(3){ /*nth-chield (N) -> donde N es el número del hijo que se le quiere aplicar la propiedad*/
    background-color: orange;
}
.hijos_pseudo p:nth-child(4){
    background-color: tomato;
}
/*Cambiando el color a todos los hijos pares*/
.hijos_pseudo p:nth-child(2n){
    background-color: green;
}
/*Cambiando el color a todos los hijos impares*/
.hijos_pseudo p:nth-child(2n-1){
    background-color: blueviolet;
}
/*Pseudo elementos -> ::before*/
.prueba_before::before{
    content: 'hola ';
    color:red;
    font-size: 30px;
    width: 12px;
    height: 12px;
    background-color: yellow;
    padding: 6px;
}
/*Pseudo elementos -> ::after*/
.prueba_after::after{
    content: 'hola';
    color:yellow;
    background-color: blue;
    width: 12px;
    height: 12px;
    padding: 6px;
}
/*Pseudo elementos -> ::first-letter */ 
.prueba_first_letter::first-letter{
    color:red;
    font-size: 34px;
    text-decoration: underline;
}
/* el valid trabaja de la mano con el required, valid = todos menos los required*/
.input1:required{
    border: 1px solid red;
}
input:valid{
    background-color: blue;
    color: white;
}
input:invalid{
    background-color: red;
    color: white;
}
.padre ul li:nth-child(3){
    background-color: orange;
}
.padre ul .selecciona_este_li{
    background-color: green;
}
.padre li:nth-child(4){
    background-color: aqua;
}
/*Forma más recomenda es usar una única clase*/
.selecciona_este_li{
    background-color: gold;
}
/*Herencias*/
.container{
    color: blue;
    font-size: 10px;
    border: 1px solid green;
}
.child{
    border: inherit;/*Para que herede las propiedades del padre*/
    font-size: initial;/*Con initial es para que no herede las propiedades del padre, en este caso toma el valor inicial de html (16px por defecto)*/
}
/*Cascada*/
.mi_parrafo{
    padding: 10px;
    color: red;
}
.mi_parrafo{
    background-color: grey;
    color: blue;
}/*Por la cascada primero se aplica el color rojo y luego el azul (lo último reescribe a la propiedad anterior)*/

/*Unidades de medidas

    Unidades de medida absolutas: son aquellas que no cambian. Ejm: Pixeles
    Unidades de medida relativa: si van a cambiar de acuerdo al dispositivo, contenido, tamaño del navegador Ejm rem, em, vw, vh, otras
*/
.caja_1{
    background-color: brown;
    width: 300px;
    height: 300px;
}
.caja_2{
    background-color: blue;
    width: 50%;
    font-size: 30px;
}
.caja_3{
    background-color: red;
    width: 50%;
    font-size: 20px;
    /*
    font-size: 1em; donde el 1em toma el valor del elemento más cercano, para este caso la caja 2 (30px)
    1rem; donde 1rem toma el valor de la raiz, que es 16px de forma predeterminada
    */
}
